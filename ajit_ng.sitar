//A Shift register consists of a
//producer, connected to a consumer through 
//an array of shift register stages.
//The number of stages and delay of 
//each stage are parameters

module Top
	submodule_array cpu[2] : CPU<12>    	//Instantiate a memory module with <size=2 MB,delay=10>
    submodule dcache : DCACHE<0>
    submodule icache : ICACHE<0>

    net_array d_asi[2] : capacity 1 width 8
    net_array d_addr[2] : capacity 1 width 32
    net_array d_request_type[2] : capacity 1 width 8
    net_array d_byte_mask[2] : capacity 1 width 8
    net_array d_write_data[2] : capacity 1 width 64
    net_array d_mae[2] : capacity 1 width 8
    net_array d_read_data[2] : capacity 1 width 64    
    
    net_array	i_asi[2]: capacity 1 width 8
    net_array i_addr[2]: capacity 1 width 32
    net_array i_request_type[2]: capacity 1 width 8
    net_array i_byte_mask[2]: capacity 1 width 8
    net_array i_mae[2]: capacity 1 width 8
    net_array inst_pair[2]: capacity 1 width 64
	net_array i_mmu_fsr[2]: capacity 1 width 32
    
    for i in 0 to 1
        
        // CPU and D Cache

        cpu[i].d_asi => d_asi[i]
        cpu[i].d_addr => d_addr[i]
        cpu[i].d_request_type => d_request_type[i]
        cpu[i].d_byte_mask => d_byte_mask[i]
        cpu[i].d_write_data => d_write_data[i]
        cpu[i].d_mae_in <= d_mae[i]
        cpu[i].d_read_data <= d_read_data[i]
        

        dcache.asi[i] <= d_asi[i]
        dcache.addr[i] <= d_addr[i]
        dcache.request_type[i] <= d_request_type[i]
        dcache.byte_mask[i] <= d_byte_mask[i]
        dcache.write_data[i] <= d_write_data[i]
        dcache.mae_out[i] => d_mae[i]
        dcache.read_data[i] => d_read_data[i]
        
        // CPU and I Cache

        cpu[i].i_asi => i_asi[i]
        cpu[i].i_addr => i_addr[i]
        cpu[i].i_request_type => i_request_type[i]
        cpu[i].i_byte_mask => i_byte_mask[i]
        cpu[i].i_mae_in <= i_mae[i]
        cpu[i].inst_pair <= inst_pair[i]
        cpu[i].i_mmu_fsr <= i_mmu_fsr[i]
        
        icache.asi[i] <= i_asi[i]
        icache.addr[i] <= i_addr[i]
        icache.request_type[i] <= i_request_type[i]
        icache.byte_mask[i] <= i_byte_mask[i]
        icache.mae_out[i] => i_mae[i]
        icache.inst_pair[i] => inst_pair[i]
        icache.mmu_fsr[i] => i_mmu_fsr[i]
    
    end for

end module
    
module CPU
	parameter int CORE_ID = 0
	parameter int CPU_ID = 0
    parameter int THREAD_ID = 0
	parameter int isa_mode = 32
	parameter int bp_table_size = 16
	parameter int report_traps = 0
    parameter int init_pc = 0

    //defne ports for D Cache
    outport	d_asi : width 8
    outport d_addr : width 32
    outport d_request_type : width 8
    outport d_byte_mask : width 8
    outport d_write_data : width 64
    inport d_mae_in : width 8
    inport d_read_data : width 64    

    //define ports for I cache
    outport	i_asi : width 8
    outport i_addr : width 32
    outport i_request_type : width 8
    outport i_byte_mask : width 8
    inport i_mae_in : width 8
    inport inst_pair : width 64
	inport i_mmu_fsr : width 32
    
    include $extern "C" {
		#include "string.h"
		#include "ajit_ng.h"	
		#include "Ancillary.h"
		#include "RegisterFile.h"
		#include "Decode.h"
		#include "Flags.h"
		#include "Opcodes.h"
		#include "ThreadLogging.h"
		#include "Traps.h"
		#include "AjitThreadS.h"
		#include "ThreadInterfaceS.h"
		#include "ExecuteS.h"
    }
	$


    //include $extern void init_cpu();$
    //include $extern void cpu();$
    //include $extern thread_local state current_state;$
    decl $uint8_t mae, done_pull, d_done_pull, i_done_pull, skip_fetch, wait_4_cache;$
    decl $uint64_t dcache_read_data;$
    decl $token<sizeof(uint8_t)*8> mae_token, d_mae_token, i_mae_token;$
	decl $token<sizeof(uint64_t)*8> read_data_token;$
	decl $ThreadState* thread_state;$
	decl $dcache_out dc_out ;$
	decl $icache_out ic_out;$
	decl $dcache_in dc_in;$
	decl $icache_in ic_in;$
	decl $int is_buffer_hit;$
	decl $uint8_t post_fetch_trap;$
	decl $InstructionType inst_type;$
	decl $Opcode opcode;$
	decl $uint32_t operand1_0,operand1_1,operand1_2,operand1_3,operand2_0,operand2_1,operand2_2,operand2_3, result_h, result_l;$
	decl $uint8_t rd, asi, rs1, rs2, shcnt, software_trap, i , a;$
	decl $uint8_t flags;$
	decl $uint16_t simm13;$
	decl $uint32_t disp30, disp22;$
	decl $uint32_t data0, data1;$
	decl $uint8_t vector_data_type;$
	decl $uint8_t skip_execute, skip_fp_execute;$
	decl $uint32_t post_execute_trap_vector;$
	decl $uint8_t save_flag;$
	decl $uint8_t restore_flag;$

behavior
	$

	opcode = _UNASSIGNED_;
	inst_type = _UNKNOWN_;

	operand1_0 = operand1_1 = operand1_2 = 
			operand1_3 = operand2_0 = operand2_1 = operand2_2 = operand2_3 = 0;
			
	
	dc_out = { (void *) &d_asi, (void *) &d_addr, (void *) &d_request_type, (void *) &d_byte_mask, (void *) &d_write_data, (void *) &d_read_data, \
											0,0,0,0, 0, 0, 0, 0, 0, 0, 0,0,0,0, 0, 0, 0, 0};
	ic_out = {(void *) &i_asi, (void *) &i_addr, (void *) &i_request_type, (void *) &i_byte_mask, 0, 0, 0, 0, 0};
    dc_in = {(void *)&d_mae_in, (void *)&d_read_data};
	ic_in = {(void *)&i_mae_in, (void *)&inst_pair, (void *)&i_mmu_fsr };

    thread_state = makeThreadState(CORE_ID, THREAD_ID, isa_mode, bp_table_size, report_traps, (uint32_t)init_pc);
	
    $;

	do
        
        $
		thread_state->addr_space = (getBit32(thread_state->status_reg.psr, 7) == 0) ? 8 : 9; // Supervisor bit

		skip_fetch = !(thread_state->mode == _EXECUTE_MODE_);
		// Only MAE trap from fetchInstruction
		post_fetch_trap=0;
		
		thread_state->mmu_fsr = 0;
		$;
        
		if (skip_fetch == 0) then // use the sitar if
		
			$
			//clear register-update flags 
			//(which maintain information for logging)
			//at the start of this instruction cycle.
			clearStateUpdateFlags(thread_state);
			thread_state->reg_update_flags.pc = thread_state->status_reg.pc;
			
			ic_out.mae = 0;
			ic_out.push_done = 0;
			is_buffer_hit = fetchInstruction_split_1(thread_state, thread_state->addr_space, thread_state->status_reg.pc, &ic_out ); //memory_read            
			done_pull = 0;
			$;
			
			if (is_buffer_hit == 0) then // this is a sitar if
				do
					wait until (this_phase==0);
					$done_pull=i_mae_in.pull(mae_token);$;
					if(not done_pull) then wait end if;
				while(not done_pull) end do;   
				wait until (this_phase==1);
				$memcpy(&ic_out.mae, mae_token.data(), sizeof(uint8_t));$;
			end if;

			$

			post_fetch_trap = fetchInstruction_split_2(thread_state, thread_state->status_reg.pc, &(thread_state->instruction),
									&(thread_state->mmu_fsr),&ic_out, &ic_in); //memory_read

			//================================
			//increment count of instructions fetched
			(thread_state->num_ifetches)++;
            
            
			if((thread_state->reporting_interval > 0) && ((thread_state->num_ifetches)%(thread_state->reporting_interval)==0) )
			{
				fprintf(stderr,"\n==============================================\n");
				//fprintf(stderr,"Real time = %s\n",ctime(&simulation_time));
				//fprintf(stderr,"Cycle-count estimate = %lu\n",getCycleEstimate(thread_state));
				fprintf(stderr,"num_ifetches = %lu\n",thread_state->num_ifetches);
				fprintf(stderr,"num_traps = %u\n",thread_state->num_traps);
				fprintf(stderr,"PC=0x%x\n",thread_state->status_reg.pc);
				fprintf(stderr,"nPC=0x%x\n",thread_state->status_reg.npc);
				fprintf(stderr,"trap_vector=0x%x\n",thread_state->trap_vector);
				fprintf(stderr,"==============================================\n");
			}

			//================================

			thread_state->trap_vector = setBit32(thread_state->trap_vector, _MAE_, post_fetch_trap);
			#ifdef DEBUG
			fprintf(stderr,"Fetched instruction 0x%x at PC = 0x%x\n",thread_state->instruction, thread_state->status_reg.pc);
			#endif

			// update mmu fsr, far
			// This is done separately to match the behaviour of
			// the instruction pipeline.
			$;
			
			if(thread_state->mmu_fsr != 0) then // Lets make this a sitaar if
			
				$
				updateMmuFsrFar_push(thread_state->mmu_fsr, thread_state->status_reg.pc, &dc_out);

				done_pull = 0;
				$;
			    
				do
					wait until (this_phase==0);
					$done_pull= d_mae_in.pull(mae_token);$;
					if(not done_pull) then wait end if;
				while(not done_pull) end do;				
				wait until (this_phase==1);
				
				$
				done_pull = d_read_data.pull(read_data_token);
				assert(done_pull != 0);
				memcpy(&dcache_read_data, read_data_token.data(), sizeof(uint64_t));
                $;
			end if;
		end if;

		$
		uint8_t annul_trap = getBit32(thread_state->trap_vector, _ANNUL_);
		uint8_t update_post_fetch_trap = !skip_fetch && post_fetch_trap && !annul_trap;

		if(update_post_fetch_trap)
		{
			thread_state->trap_vector = setBit32(thread_state->trap_vector, _TRAP_, 1);
			thread_state->trap_vector = setBit32(thread_state->trap_vector, _INSTRUCTION_ACCESS_EXCEPTION_, 1);
		}

		uint8_t annul_inst = !skip_fetch && annul_trap; //Annul the current instruction
		
		if(annul_inst)
		{
			thread_state->trap_vector    =  setBit32(thread_state->trap_vector, _ANNUL_, 0) ;
			thread_state->status_reg.pc  =  thread_state->status_reg.npc ;
			thread_state->status_reg.npc =  thread_state->status_reg.npc + 4 ;
			#ifdef DEBUG
			fprintf(stderr,"\tcurrent instruction is annulled\n");
			#endif

		}

		uint8_t skip_decode = skip_fetch || post_fetch_trap || annul_trap;

		//if(!skip_decode)
		//{
		//	inform_HW_server(thread_state, GDB_IFETCH, 0);
		//}

		uint8_t fp_uimp_inst = 0;
		uint8_t fp_invalid_reg = 0;	//to check fp_invalid_reg exception

		if(!skip_decode)
			decodeInstruction(thread_state->instruction, thread_state->isa_mode,
						&opcode, 
						thread_state->trap_vector, 
						&rs1, &rs2, &simm13, 
						&shcnt, &disp30, 
						&disp22, &software_trap, 
						&rd, &i, &a, &asi, &inst_type, 
						&fp_uimp_inst, &vector_data_type);

		// Generating Invalid_FP_Register trap
		if(fp_uimp_inst) {
			thread_state->trap_vector = setBit32(thread_state->trap_vector, _TRAP_, 1) ;
			thread_state->trap_vector = setBit32(thread_state->trap_vector, _FP_EXCEPTION_, 1) ;
			thread_state->status_reg.fsr = setSlice32(thread_state->status_reg.fsr, 16, 14, _UNIMPLEMENTED_FPOP_);
		}

		flags = 0;
		flags = ((a == 1) ? setBit8(flags, _ANNUL_FLAG_, 1) : flags);

		uint8_t cwp = getSlice32(thread_state->status_reg.psr, 4, 0);
		if(!skip_decode)
			readOperands(thread_state->register_file,
					opcode, rs1, rs2, rd, simm13, shcnt, 
					disp30, disp22, software_trap, i, &operand2_3, &operand2_2,
					&operand2_1, &operand2_0, &operand1_3, &operand1_2, 
					&operand1_1, &operand1_0, inst_type, cwp, 
					&data1, &data0, &fp_invalid_reg);

		// Generating Invalid_FP_Register trap
		if(fp_invalid_reg) {
			thread_state->trap_vector = setBit32(thread_state->trap_vector, _TRAP_, 1) ;
			thread_state->trap_vector = setBit32(thread_state->trap_vector, _FP_EXCEPTION_, 1) ;
			thread_state->status_reg.fsr = setSlice32(thread_state->status_reg.fsr, 16, 14, _INVALID_FP_REGISTER_);
		}

		uint8_t is_fp_op = (inst_type == _FPop1_INS_) || (inst_type == _FPop2_INS_);

		skip_fp_execute = (skip_decode || !is_fp_op);
		uint32_t post_fp_execute_trap_vector = 0;
		if(!skip_fp_execute)
		{
			post_fp_execute_trap_vector = 
				completeFPExecution(thread_state,  opcode, 
						operand2_3, operand2_2, operand2_1, operand2_0,  
						operand1_3, operand1_2, operand1_1, operand1_0, 
						rd, &(thread_state->status_reg), thread_state->trap_vector);
			thread_state->trap_vector = post_fp_execute_trap_vector;
		}

		skip_execute = (skip_decode || is_fp_op);
		post_execute_trap_vector = 0;

		save_flag = 0;
		restore_flag = 0;

		$;
		
		if (skip_execute == 0) then // This is a sitaar if
		
			$
			//Execute instruction 
            //Lot of redundant variables are there, lets keep it like this
			dc_out.cache_transactions = 0;
			post_execute_trap_vector = executeInstruction_split_1(thread_state,
							opcode, 
							operand2_0, operand2_1, 
							operand1_0, operand1_1, 
							&result_h, &result_l,
							&flags, rs1, rd, asi, i,
							data1, data0, vector_data_type, 
							&dc_out, &ic_out);
                           
			done_pull = d_done_pull = i_done_pull = 0;
			
			wait_4_cache = ((dc_out.push_done) || (ic_out.push_done));
			
			$;
			
			if (wait_4_cache != 0) then //sitaar if
				do												// sitaar do
					do											// sitaar do
						wait until (this_phase==0);
						$
						if (dc_out.push_done) d_done_pull= d_mae_in.pull(d_mae_token);
						if (ic_out.push_done) i_done_pull= i_mae_in.pull(i_mae_token);
						done_pull = ((dc_out.push_done) && (ic_out.push_done))?(d_done_pull && i_done_pull):\
							(((dc_out.push_done) && d_done_pull) || ((ic_out.push_done) && i_done_pull));
						$;
						if(not done_pull) then wait end if;
					while(not done_pull) end do;   
					wait until (this_phase==1);
						
					$
					if (d_done_pull) memcpy(&dc_out.mae, d_mae_token.data(), sizeof(uint8_t));
					if (i_done_pull) memcpy(&ic_out.mae, i_mae_token.data(), sizeof(uint8_t));
							
					//Lot of redundant variables are there, lets keep it like this
					post_execute_trap_vector |= executeInstruction_split_2(thread_state,
						opcode, 
						operand2_0, operand2_1, 
						operand1_0, operand1_1, 
						&result_h, &result_l,
						&flags, rs1, rd, asi, i,
						data1, data0, vector_data_type, 
						&dc_out, &ic_out);
					
					wait_4_cache = ((dc_out.push_done) || (ic_out.push_done));
					
					$;
								
				while (wait_4_cache != 0) end do;
			end if;
			
			$
			//This trap vector should have been saved in thread state by now
			thread_state->trap_vector = post_execute_trap_vector;
			save_flag = (opcode == _SAVE_);
			restore_flag = (opcode == _RESTORE_);
			$;
		end if;

		$
		uint8_t post_execute_trap = getBit32(thread_state->trap_vector, _TRAP_);


		uint8_t skip_write_back = skip_execute || post_execute_trap || !getBit8(flags, _NEED_WRITE_BACK_);
		if(!skip_write_back)
		{
			writeBackResult(thread_state->register_file, rd, result_h, result_l, flags, getSlice32(thread_state->status_reg.psr, 4, 0), thread_state->status_reg.pc, &(thread_state->reg_update_flags));
		}
       			
		
		if(!skip_fetch && (getBit32(thread_state->trap_vector, _TRAP_)==0))
		{
			increment_instruction_count(thread_state);

			if((save_flag || restore_flag) && thread_state->report_traps)
			{
				fprintf(stderr,"Info: at pc=0x%x, %s.. now fp=0x%x, sp=0x%x, wim=0x%x, psr=0x%x\n", thread_state->status_reg.pc,  (save_flag ? "save" : "restore"),
						frame_pointer(thread_state), stack_pointer(thread_state),
						thread_state->status_reg.wim,
						thread_state->status_reg.psr);
			}
			else if(thread_state->report_traps)
			{
				fprintf(stderr,"Info: at pc=0x%x, now fp=0x%x, sp=0x%x, wim=0x%x, psr=0x%x\n", 
						thread_state->status_reg.pc,  
						frame_pointer(thread_state), stack_pointer(thread_state),
						thread_state->status_reg.wim,
						thread_state->status_reg.psr);
			}

			//if logging is enabled,
			//Compute a signature containing information about
			//processor state updated by this instruction
			//and send it out to the logger.
			//Lets leave this commented for now
			//if(is_logging_enabled())
			//{
			//	generateLogMessage(thread_state);
			//}
		}

		uint8_t update_pc = (!skip_execute || !skip_fp_execute) && !post_execute_trap && !isBranchInstruction(opcode, inst_type);
		if(update_pc)
		{
			thread_state->status_reg.pc = thread_state->status_reg.npc ;
			thread_state->status_reg.npc = thread_state->status_reg.npc + 4 ;
		}
		$;
			
	while(1) end do;

end behavior
end module


module DCACHE
	parameter int CORE_ID = 0
	parameter int CPU_ID = 0
	parameter int isa_mode = 32
	parameter int bp_table_size = 16
	parameter int report_traps = 0
    parameter int init_pc = 0

    inport_array	asi[2] : width 8
    inport_array addr[2] : width 32
    inport_array request_type[2] : width 8
    inport_array byte_mask[2] : width 8
    inport_array write_data[2] : width 64
	
    outport_array mae_out[2] : width 8
    outport_array read_data[2] : width 64
	
behavior

	wait(0,1);
	
end behavior

end module

module ICACHE
	parameter int CORE_ID = 0
	parameter int CPU_ID = 0
	parameter int isa_mode = 32
	parameter int bp_table_size = 16
	parameter int report_traps = 0
    parameter int init_pc = 0
    
    inport_array	asi[2] : width 8
    inport_array addr[2] : width 32
    inport_array request_type[2] : width 8
    inport_array byte_mask[2] : width 8
    inport_array write_data[2] : width 64
	
    outport_array mae_out[2] : width 8
    outport_array inst_pair[2] : width 64
	outport_array mmu_fsr[2] : width 32
	
behavior

	wait(0,1);
	
end behavior

end module
